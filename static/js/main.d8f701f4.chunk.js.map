{"version":3,"sources":["redux/hooks.js","redux/slices/userSlice.js","redux/slices/routerSlice.js","containers/LoginPage.jsx","redux/slices/chatRoomSlice.js","components/mainPage/InputBar.jsx","components/mainPage/MessageAuthor.jsx","components/mainPage/MessageContent.jsx","components/mainPage/MessageDate.jsx","components/mainPage/MessageItem.jsx","components/mainPage/MessageList.jsx","components/mainPage/Content.jsx","components/mainPage/Header.jsx","containers/MainPage.jsx","containers/RegistrationPage.jsx","App.js","redux/slices/index.js","redux/store.js","index.js"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","counterSlice","createSlice","name","initialState","userList","currentUser","reducers","register","state","action","push","payload","login","logout","actions","selectUserList","user","selectCurrentUser","routerSlice","currentRoute","switchRoute","extraReducers","builder","addCase","selectCurrentRouter","router","Container","styled","div","Title","InputName","input","ButtonStart","LoginPage","setUserName","dispatch","React","useState","text","setText","Fragment","type","value","onChange","e","target","placeholder","onClick","find","val","alert","BOT_USER","id","uuidv4","botWelcomeMessage","chatRoomSlice","chatRooms","createChatRoom","date","Date","toISOString","sendMessage","reducer","console","log","userId","messages","prepare","newMessage","selectMyMessages","chatRoom","InputBar","className","MessageAuthor","author","MessageContent","MessageDate","MessageItem","message","isMine","MessageList","map","Content","userName","init","setInit","myMessages","useEffect","setTimeout","length","Header","MainPage","RegistrationPage","App","showLogin","showRegistration","showMain","rootReducer","combineReducers","userSlice","persistConfig","key","version","storage","blacklist","persistedReducer","persistReducer","store","configureStore","middleware","thunk","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.d8f701f4.chunk.js","sourcesContent":["import { useDispatch, useSelector } from 'react-redux'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch()\nexport const useAppSelector = useSelector\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  userList: [],\n  currentUser: null\n}\n\nexport const counterSlice = createSlice({\n  name: 'user',\n  initialState: initialState,\n  reducers: {\n    register: (state, action) => {\n      state.userList.push(action.payload)\n    },\n    login: (state, action) => {\n      state.currentUser = action.payload\n    },\n    logout: (state, action) => {\n      state.currentUser = null\n    }\n  }\n})\n\n// Action creators are generated for each case reducer function\nexport const { register, login, logout } = counterSlice.actions\n\nexport const selectUserList = (state) => state.user?.userList\nexport const selectCurrentUser = (state) => state.user.currentUser\n\nexport default counterSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { login, logout, register } from './userSlice'\n\nconst initialState = {\n  currentRoute: 'login'\n}\n\nexport const routerSlice = createSlice({\n  name: 'router',\n  initialState: initialState,\n  reducers: {\n    switchRoute: (state, action) => {\n      state.currentRoute = action.payload\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(register, (state) => {\n        state.currentRoute = 'login'\n      })\n      .addCase(login, (state) => {\n        state.currentRoute = 'main'\n      })\n      .addCase(logout, (state) => {\n        state.currentRoute = 'login'\n      })\n  }\n})\n\nexport const { switchRoute } = routerSlice.actions\n\nexport const selectCurrentRouter = (state) => state.router.currentRoute\n\nexport default routerSlice.reducer\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useAppDispatch, useAppSelector } from '../redux/hooks'\nimport { switchRoute } from '../redux/slices/routerSlice'\nimport { login, selectUserList } from '../redux/slices/userSlice'\n\nconst Container = styled.div`\n  padding: 30px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n  border: 1px solid black;\n  border-radius: 20px;\n  font-size: 14px;\n`\n\nconst Title = styled.div`\n  font-size: 3rem;\n  margin-bottom: 20px;\n`\n\nconst InputName = styled.input`\n  width: 80%;\n  height: 2.5rem;\n  padding: 0 10px;\n  font-size: 1rem;\n  outline: none;\n  border: 1px solid black;\n  border-radius: 5px;\n  cursor: pointer;\n`\n\nconst ButtonStart = styled.input`\n  width: 50%;\n  height: 2rem;\n  margin-top: 20px;\n  padding: 5px 20px;\n  border: 1px solid black;\n  border-radius: 5px;\n  cursor: pointer;\n`\n\nconst LoginPage = ({ setUserName }) => {\n  const dispatch = useAppDispatch()\n  const [text, setText] = React.useState('')\n  const userList = useAppSelector(selectUserList)\n\n  const gotoRegistrationPage = (e) => {\n    dispatch(switchRoute('registration'))\n  }\n\n  const onChange = (e) => {\n    setText(e.target.value)\n  }\n\n  const doLogin = () => {\n    if (!text) {\n      alert('Please enter user name')\n      return\n    }\n    const user = userList.find((val) => val.name === text)\n    if (!user) {\n      alert('User not found, please try again or sign-up')\n      return\n    }\n    dispatch(login(user))\n  }\n  return (\n    <React.Fragment>\n      <Container>\n        <Title>Welcome</Title>\n        <InputName\n          type=\"text\"\n          value={text}\n          onChange={onChange}\n          placeholder={'Your name'}\n        />\n        <ButtonStart type=\"button\" value={'Login'} onClick={doLogin} />\n        <ButtonStart\n          type=\"button\"\n          value={'Sign Up'}\n          onClick={gotoRegistrationPage}\n        />\n      </Container>\n    </React.Fragment>\n  )\n}\n\nexport default LoginPage\n","import { createSlice } from '@reduxjs/toolkit'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport const BOT_USER = {\n  id: uuidv4(),\n  name: 'I AM BOT'\n}\n\nconst botWelcomeMessage = {\n  id: uuidv4(),\n  text: 'Welcome, i am bot',\n  user: BOT_USER\n}\n\nconst initialState = {\n  chatRooms: {}\n}\n\nexport const chatRoomSlice = createSlice({\n  name: 'chatRoom',\n  initialState: initialState,\n  reducers: {\n    createChatRoom: (state, action) => {\n      state.chatRooms[action.payload] = [\n        { ...botWelcomeMessage, date: new Date().toISOString() }\n      ]\n    },\n    sendMessage: {\n      reducer: (state, action) => {\n        console.log(\n          'state.chatRooms[action.payload.userId]',\n          state.chatRooms[action.payload.userId]\n        )\n        console.log('action.payload.messages', action.payload.messages)\n\n        state.chatRooms[action.payload.userId].push(...action.payload.messages)\n      },\n      prepare: (newMessage) => {\n        return {\n          payload: {\n            userId: newMessage.user.id,\n            messages: [\n              newMessage,\n              { ...newMessage, id: uuidv4(), user: BOT_USER }\n            ]\n          }\n        }\n      }\n    }\n  }\n})\n\nexport const { createChatRoom, sendMessage } = chatRoomSlice.actions\n\nexport const selectChatRooms = (state) => state.chatRoom.chatRooms\nexport const selectMyMessages = (state) =>\n  state.chatRoom.chatRooms[state.user.currentUser.id] || []\n\nexport default chatRoomSlice.reducer\n","import React from 'react'\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks'\nimport { sendMessage } from '../../redux/slices/chatRoomSlice'\nimport { selectCurrentUser } from '../../redux/slices/userSlice'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst InputBar = () => {\n  const dispatch = useAppDispatch()\n  const currentUser = useAppSelector(selectCurrentUser)\n  const [text, setText] = React.useState('')\n\n  const doSendMessage = () => {\n    if (!text) return\n    const newMessage = {\n      id: uuidv4(),\n      text: text,\n      user: currentUser,\n      date: new Date().toISOString()\n    }\n    dispatch(sendMessage(newMessage))\n    setText('')\n  }\n\n  const onChange = (e) => {\n    setText(e.target.value)\n  }\n\n  return (\n    <div className=\"input-bar-container\">\n      <input type=\"text\" value={text} onChange={onChange} />\n      <input type=\"button\" value={'>'} onClick={doSendMessage} />\n    </div>\n  )\n}\n\nexport default InputBar\n","import React from 'react'\n\nconst MessageAuthor = ({ author }) => {\n  return <div className=\"message-item-author\">{author}</div>\n}\n\nexport default MessageAuthor\n","import React from 'react'\n\nconst MessageContent = ({ text }) => {\n  return <div className=\"message-item-content-container\">{text}</div>\n}\n\nexport default MessageContent\n","import React from 'react'\n\nconst MessageDate = ({ date }) => {\n  return <div className=\"message-item-date\">{date}</div>\n}\n\nexport default MessageDate\n","import React from 'react'\nimport { useAppSelector } from '../../redux/hooks'\nimport { selectCurrentUser } from '../../redux/slices/userSlice'\nimport MessageAuthor from './MessageAuthor'\nimport MessageContent from './MessageContent'\nimport MessageDate from './MessageDate'\n\nconst MessageItem = ({ message }) => {\n  const currentUser = useAppSelector(selectCurrentUser)\n\n  const isMine = currentUser.id === message.user.id\n  return (\n    <div\n      className={`message-item-container ${\n        isMine ? 'right-message' : 'left-message'\n      }`}\n    >\n      <MessageAuthor author={message.user.name} />\n      <MessageContent text={message.text} />\n      <MessageDate date={message.date} />\n    </div>\n  )\n}\nexport default MessageItem\n","import React from 'react'\nimport MessageItem from './MessageItem'\n\nconst MessageList = ({ messages }) => {\n  return (\n    <div className=\"message-list-container\">\n      {messages.map((message) => (\n        <MessageItem key={message.id} message={message} />\n      ))}\n    </div>\n  )\n}\n\nexport default MessageList\n","import React from 'react'\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks'\nimport {\n  createChatRoom,\n  selectMyMessages\n} from '../../redux/slices/chatRoomSlice'\nimport { selectCurrentUser } from '../../redux/slices/userSlice'\nimport InputBar from './InputBar'\nimport MessageList from './MessageList'\n\nconst Content = ({ userName }) => {\n  const [init, setInit] = React.useState(false)\n  const dispatch = useAppDispatch()\n  const myMessages = useAppSelector(selectMyMessages)\n  const currentUser = useAppSelector(selectCurrentUser)\n\n  React.useEffect(() => {\n    if (init) return\n    setTimeout(() => {\n      if (myMessages?.length > 0) {\n        setInit(true)\n      } else {\n        dispatch(createChatRoom(currentUser.id))\n      }\n    }, 1000 * 2)\n  }, [myMessages, currentUser, dispatch, init])\n\n  return (\n    <div className=\"content-container\">\n      {!init && <h1 className=\"loading\">Loading....</h1>}\n      {init && (\n        <>\n          <MessageList messages={myMessages} />\n          <InputBar />\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Content\n","import React from 'react'\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks'\nimport { logout, selectCurrentUser } from '../../redux/slices/userSlice'\n\nconst Header = () => {\n  const dispatch = useAppDispatch()\n  const currentUser = useAppSelector(selectCurrentUser)\n  const doLogout = () => {\n    dispatch(logout())\n  }\n  return (\n    <div className=\"header-container \">\n      <div>{`Hi, ${currentUser.name}`}</div>\n      <input type=\"button\" value={'E'} onClick={doLogout} />\n    </div>\n  )\n}\n\nexport default Header\n","import Content from '../components/mainPage/Content'\nimport Header from '../components/mainPage/Header'\n\nconst MainPage = () => {\n  return (\n    <>\n      <Header />\n      <Content />\n    </>\n  )\n}\n\nexport default MainPage\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useAppDispatch, useAppSelector } from '../redux/hooks'\nimport { switchRoute } from '../redux/slices/routerSlice'\nimport { v4 as uuidv4 } from 'uuid'\nimport { register, selectUserList } from '../redux/slices/userSlice'\n\nconst Container = styled.div`\n  padding: 30px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n  border: 1px solid black;\n  border-radius: 20px;\n  font-size: 14px;\n`\n\nconst Title = styled.div`\n  font-size: 3rem;\n  margin-bottom: 20px;\n`\n\nconst InputName = styled.input`\n  width: 80%;\n  height: 2.5rem;\n  padding: 0 10px;\n  font-size: 1rem;\n  outline: none;\n  border: 1px solid black;\n  border-radius: 5px;\n  cursor: pointer;\n`\n\nconst ButtonStart = styled.input`\n  width: 50%;\n  height: 2rem;\n  margin-top: 20px;\n  padding: 5px 20px;\n  border: 1px solid black;\n  border-radius: 5px;\n  cursor: pointer;\n`\n\nconst RegistrationPage = () => {\n  const dispatch = useAppDispatch()\n  const [text, setText] = React.useState('')\n  const userList = useAppSelector(selectUserList)\n\n  const gotoLoginPage = (e) => {\n    dispatch(switchRoute('login'))\n  }\n  const doRegister = (e) => {\n    if (!text) {\n      alert('Please enter user name')\n      return\n    }\n    if (userList.find((val) => val.name === text)) {\n      alert('User already exist, please try other name')\n      return\n    }\n    const user = {\n      id: uuidv4(),\n      name: text\n    }\n    dispatch(register(user))\n  }\n\n  const onChange = (e) => {\n    setText(e.target.value)\n  }\n  return (\n    <React.Fragment>\n      <Container>\n        <Title>Registration</Title>\n        <InputName\n          type=\"text\"\n          value={text}\n          onChange={onChange}\n          placeholder={'Your name'}\n        />\n        <ButtonStart type=\"button\" value={'Register'} onClick={doRegister} />\n        <ButtonStart\n          type=\"button\"\n          value={'Back to login'}\n          onClick={gotoLoginPage}\n        />\n      </Container>\n    </React.Fragment>\n  )\n}\n\nexport default RegistrationPage\n","import React from 'react'\nimport LoginPage from './containers/LoginPage'\nimport MainPage from './containers/MainPage'\nimport RegistrationPage from './containers/RegistrationPage'\nimport { useAppSelector } from './redux/hooks'\nimport { selectCurrentRouter } from './redux/slices/routerSlice'\nimport { selectCurrentUser } from './redux/slices/userSlice'\nimport './styles.css'\n\nexport default function App() {\n  const currentRoute = useAppSelector(selectCurrentRouter)\n  const currentUser = useAppSelector(selectCurrentUser)\n\n  const showLogin = !currentUser && (!currentRoute || currentRoute === 'login')\n  const showRegistration = !currentUser && currentRoute === 'registration'\n  const showMain = currentUser || currentRoute === 'main'\n\n  return (\n    <div className=\"app-container\">\n      {showLogin && <LoginPage />}\n      {showRegistration && <RegistrationPage />}\n      {showMain && <MainPage />}\n    </div>\n  )\n}\n","import { combineReducers } from '@reduxjs/toolkit'\nimport chatRoomSlice from './chatRoomSlice'\nimport routerSlice from './routerSlice'\nimport userSlice from './userSlice'\n\nconst rootReducer = combineReducers({\n  chatRoom: chatRoomSlice,\n  user: userSlice,\n  router: routerSlice\n})\n\nexport { rootReducer }\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport thunk from 'redux-thunk'\nimport { rootReducer } from './slices'\n\nconst persistConfig = {\n  key: 'root',\n  version: 2,\n  storage,\n  blacklist: ['router']\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: [thunk]\n})\n\nexport const persistor = persistStore(store)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store, { persistor } from './redux/store'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor} loading={null}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}